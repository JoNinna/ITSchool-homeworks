Linux Core


Comenzi Utile

Clonati acest document. În box-urile goale completati cu rezolvarile voastre (comenzi folosite). Dati apoi share la document si trimiteti-l pe discord in mesaj direct (nu pe grup).

Exercitiul 1: Useri si permisiuni

Cerinta 1: Aveți o echipa formată din 3 membrii: alice, bob si charlie. 
Creati acesti 3 useri. Dați switch la fiecare user si verificati ca a fost creat cu success.
Am creat un script de bash adduser.sh care creaza userii pe baza comenzii sudo adduser $user 
Dupa am rular chmod +x adduser.sh si ./adduser.sh
Dat fiind ca parola noilor utilizatori este null, am rulat sudo su pentru ca mai apoi sa ma loghez pe noii useri fara a avea nevoie de parola prin su - user

Cerinta 2: În echipa avem 2 roluri: developer si tester. 
Creati 2 grupuri numite “developers” si “testers”.
sudo groupadd developer
sudo groupadd tester
# Mai exista si comanda addgroup care face cam acelasi lucuru
În grupul de developers ii avem pe alice si pe bob iar in grupul testers pe bob si charlie (bob este in 2 grupuri).
sudo usermod -aG developer alice
sudo usermod -aG developer bob
sudo usermod -aG tester bob
sudo usermod -aG tester charlie 
Verificati pentru fiecare user că este în grupurile corecte folosind comanda id sau groups.
ninna@ninna-QEMU-Virtual-Machine:~/work/ITSchool-homeworks/Linux-HW1$ groups alice 
alice : alice users developer
ninna@ninna-QEMU-Virtual-Machine:~/work/ITSchool-homeworks/Linux-HW1$ groups bob
bob : bob users developer tester
ninna@ninna-QEMU-Virtual-Machine:~/work/ITSchool-homeworks/Linux-HW1$ groups charlie
charlie : charlie users tester
sau folosind comanda cat /etc/group

Cerinta 3: Fiecare role poate accesa doar anumite directoare ale proiectului.
Creați 2 directoare numite /developers si /testers in radacina sistemului de fisiere. 
mkdir /developers si mkdir /testers
În fiecare director pot scrie doar userii grupului respectiv, dar poate citi și executa oricine. 
Verificati permisiunile directoarelor folosind comanda ls.  
sudo chown :developer developers/
sudo chown :tester testers/
sudo chmod 775 developers/
sudo chmod 775 testers/

Cerinta 4: Dati switch la userul alice si creati un fisier cu numele script.sh in directorul /developers. 
In script puneti: echo "Salut"
Dati permisiuni de execuție pentru toata lumea pe acest fișier, dar de modificare doar pentru grupul developers.
Verificati ca toți userii pot executa acest fișier, dar doar useri din grupul developers îl pot modifica.
chmod 575 script.sh

Cerinta 5: În timp membrii celor 2 echipe au fost comansati într-o singura echipa numita “tech”.
Creati un nou group numit “tech”.
sudo groupadd tech
Mutați group owner-ul pentru toate fișierele din directorul /developers si /testers la grupul “tech”.
sudo chown -R :tech /developers/
sudo chown -R :tech /testers/
Stergeti grupurile developers si testers.
sudo groupdel developer
sudo groupdel tester
Verificati ca încă mai puteți edita/rula scripturile cu userul charlie.
su - charlie
/developers/script.sh

Exercitiul 2: Pipelines si Fluxuri de date
Rezolvați următoarele cerințe folosind operatorul pipe |. 

Cerinta 1: Găsește toate liniile de log de sistem care contin cuvantul error, indiferent de majuscule. 
Hint: Vezi  /var/log/syslog
cat /var/log/syslog | grep  -i error

Cerinta 2: Găsește utilizatorii care au setat ca default shell /bin/bash. Câți utilizatori nu folosesc acest shell? 
Hint: Lista de utilizatori o gasiti in /etc/passwd
grep -v /bin/bash /etc/passwd | wc -l
Unde -v este reverse search, adica va parcurge tot fisierul dat, dar va afisa doar ce NU se potriveste cu patter-ul cerut, adica cu /bin/bash

Cerinta 3: Afișați primele și ultimele 5 comenzi utilizate de voi. 
Hint: history, head, tail
history | head -5
history | tail -5

Cerinta 4. Încercați să creați un user fara drepturi de sudo. Cum putem sa ignoram erorile de permisiuni 
(a.i. acestea sa nu mai apara in consola 
adduser test 2> /dev/null 
Note: Redirectioneaza stderr spre null 

Cerinta 5: Afișați toate comenzile rulate (cu succes) cu sudo de toti userii.
Hint: /var/log/auth.log
cat /var/log/auth.log | grep "COMMAND="

Cerinta 6: Downloadati fisierul app-1.log folosind comanda wget fisierul:
https://raw.githubusercontent.com/amihai/devops/refs/heads/main/python/log-generator/app-1.log 
Explorați puțin continutul fisierului: afisati primele si ultimele 5 linii si cate linii are fișierul
cat app-1.log | tail -5

Cerinta 7: Ce useri au erori deoarece le-a expirat tokenul (NU Permission denied).
cat /var/log/auth.log | grep "TS expired"

Cerinta 8 (bonus): Incercati sa extrageti in fisiere txt separate urmatoarele informatii din logurile de mai sus:
Lista cu numele unice ale tuturor userilor ce au avut cel putin o eroare
awk -F'user | ' '/error/ {print $2}' log.txt | sort -u > users_with_errors.txt
-F => Delimitator multiplu
/error/ => selecteaza doar liniile cu erroare
print $2 => printeaza al 2-a camp

Lista de request_id-uri unice.
awk -F'request_id | ' '{print $2}' /var/log/auth.log | sort -u > request_ids.txt

Ce request_id-uri nu au nicio eroare 
awk -F'request_id | ' '/error/ {print $2}' /var/log/auth.log | sort -u > error_request_ids.txt

grep -Fvxf request_ids.txt error_request_ids.txt > no_errors.txt
Hint: incercati sa folositi comenzile: awk, sort, uniq 

Exercitiul 3: Procese

Cerinta 1: Porniti un process ce ruleaza comanda sleep Infinity intr-un terminal. 
Deschideți alt terminal și terminati cu eliberare de resurse procesul (graceful).
sleep Infinity
ps aux | grep "sleep Infinity"
kill -15 process_id

Cerinta 2: Downloadati următorul script folosind comanda wget:
 https://raw.githubusercontent.com/amihai/devops/refs/heads/main/linux/die-hard.sh
Da-ti permisiuni de execuție pe el si rulati-l.
Omorati programul. 
wget https:...
ps aux | grep "die-hard.sh"
kill -9 PID

Cerinta 3: Deschideti un tab de firefox. Căutați procesul si terminati-l.
???????????? Permission denied

Cerinta 4: Care sunt PID-urile primele 5 programe ca utilizare de CPU. Dar ca memorie RAM. 
Hint: Puteti utiliza comanda top sau ps cu sort dupa memorie.
ps -eo pid,comm,%cpu --sort=-%cpu | head -n 5
ps -eo pid,comm,%mem --sort=-%mem | head -n 5

Cerinta 5: Cate procese are pornite userul curent? Dar root?
ps -u $(whoami) | wc -l
ps -u root | wc -l

Cerinta 6: Downloadati scriptul următor si dati-i permisiuni de execuție:
https://raw.githubusercontent.com/amihai/devops/refs/heads/main/linux/run-forever.sh
wget https://...
chmod +x run-forever.sh
Rulati scriptul in background in asa fel incat daca se inchide terminalul sa nu se omoare si scriptul.
nohup ./run-forever.sh & 
Redirectati outputul scriptului catre un fisier de log cu numele run-forever.log
./run-forever.sh > run-forever.log &
Omorati terminalul si verificati ca scriptul încă rulează folosind comanda ps si 
folosind tail -f pe fisierul de loguri.
ps aux | grep "run-forever.sh"
Omorati scriptul si verificati ca a fost oprit.





